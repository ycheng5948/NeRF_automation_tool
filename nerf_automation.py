# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\user\Desktop\UI_practice_folder\layout_v4.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# import built-in libraries
import os
import sys

# import PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import QDir

# import other necessary liberies
import numpy as np
import imutils
import cv2

# set up folders
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
SCRIPTS_FOLDER = os.path.join(ROOT_DIR, "scripts")
DATA_FOLDER = os.path.join(ROOT_DIR, "data", "nerf")

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(465, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Preview image label setup
        self.Pic_label = QtWidgets.QLabel(self.centralwidget)
        self.Pic_label.setGeometry(QtCore.QRect(10, 50, 270, 480))
        self.Pic_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Pic_label.setFrameShape(QtWidgets.QFrame.Box)
        self.Pic_label.setText("")
        self.Pic_label.setScaledContents(True)
        self.Pic_label.setObjectName("Pic_label")

        # execute_buttons vertical layout setup
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(290, 345, 171, 120))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.option_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.option_layout.setContentsMargins(0, 0, 0, 0)
        self.option_layout.setObjectName("option_layout")
        # auto_filter_radio setup
        self.auto_filter_radio = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        # self.auto_filter_radio.setAutoFillBackground(False)
        self.auto_filter_radio.setChecked(True)
        self.auto_filter_radio.setObjectName("auto_filter_radio")
        self.auto_filter_radio.setToolTip("Will automatically filter and delete blurry images\n" +
                                          "after hitting Run button\n" +
                                          "Threshold for blurry image is mean - std")
        self.option_layout.addWidget(self.auto_filter_radio)
        # manual_filter_radio setup
        self.manual_filter_radio = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        self.manual_filter_radio.setObjectName("manual_filter_radio")
        self.manual_filter_radio.setToolTip("Will keep all images after hitting Run button")
        self.option_layout.addWidget(self.manual_filter_radio)
        # outdoor_checkBox setup
        self.outdoor_checkBox = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.outdoor_checkBox.setObjectName("outdoor_checkBox")
        self.outdoor_checkBox.setToolTip("Check if the scene is outdoor\n" +
                                         "Will set the aabb_scale as 16\n" +
                                         "Default is 8")
        self.option_layout.addWidget(self.outdoor_checkBox)
        # runNGP_checkBox setup
        self.runNGP_checkBox = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.runNGP_checkBox.setObjectName("runNGP_checkBox")
        self.runNGP_checkBox.setToolTip("Open and start Instant-NeRF training" +
                                        "after filtering the images")
        self.option_layout.addWidget(self.runNGP_checkBox)

        # next_prev_buttons setup
        self.next_button = QtWidgets.QPushButton(self.centralwidget)
        self.next_button.setGeometry(QtCore.QRect(200, 535, 81, 28))
        self.next_button.setObjectName("next_button")
        self.prev_button = QtWidgets.QPushButton(self.centralwidget)
        self.prev_button.setGeometry(QtCore.QRect(10, 535, 81, 28))
        self.prev_button.setObjectName("prev_button")
        # Image_name_label setup
        self.Image_name_label = QtWidgets.QLabel(self.centralwidget)
        self.Image_name_label.setGeometry(QtCore.QRect(95, 535, 101, 29))
        self.Image_name_label.setText("")
        self.Image_name_label.setObjectName("Image_name_label")

        # browse_buttton setup
        self.browse_buttton = QtWidgets.QPushButton(self.centralwidget)
        self.browse_buttton.setGeometry(QtCore.QRect(360, 50, 93, 28))
        self.browse_buttton.setObjectName("browse_buttton")
        self.browse_buttton.setToolTip("Select the project folder from the file explorer")
        # check_button setup
        self.check_button = QtWidgets.QPushButton(self.centralwidget)
        self.check_button.setGeometry(QtCore.QRect(360, 85, 93, 28))
        self.check_button.setObjectName("check_button")
        self.check_button.setToolTip("Calculate images' blurriness")
        # show_blurry button setup
        self.show_blurry_button = QtWidgets.QPushButton(self.centralwidget)
        self.show_blurry_button.setGeometry(QtCore.QRect(385, 120, 70, 28))
        self.show_blurry_button.setObjectName("show_blurry_button")
        self.show_blurry_button.setToolTip("Only show blurry images")
        # show_all_button setup
        self.show_all_button = QtWidgets.QPushButton(self.centralwidget)
        self.show_all_button.setGeometry(QtCore.QRect(310, 120, 70, 28))
        self.show_all_button.setObjectName("show_all_button")
        self.show_all_button.setToolTip("Show all images")

        # Project setting horizontal layout setup
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 441, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        # ProjectName_label setup
        self.ProjectName_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.ProjectName_label.setObjectName("ProjectName_label")
        self.horizontalLayout.addWidget(self.ProjectName_label)
        # Project_name_lineEdit setup
        self.Project_name_lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Project_name_lineEdit.setObjectName("Project_name_lineEdit")
        self.horizontalLayout.addWidget(self.Project_name_lineEdit)
        # find_button setup
        self.find_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.find_button.setObjectName("find_button")
        self.horizontalLayout.addWidget(self.find_button)

        # Image info textbrowser setup
        # blurity_label setup
        self.blurriness_label = QtWidgets.QLabel(self.centralwidget)
        self.blurriness_label.setGeometry(QtCore.QRect(290, 470, 160, 21))
        self.blurriness_label.setObjectName("blurriness_label")
        # threshold_label setup
        self.threshold_label = QtWidgets.QLabel(self.centralwidget)
        self.threshold_label.setGeometry(QtCore.QRect(290, 490, 160, 21))
        self.threshold_label.setObjectName("threshold_label")        
        # mean_label setup
        self.mean_label = QtWidgets.QLabel(self.centralwidget)
        self.mean_label.setGeometry(QtCore.QRect(290, 510, 160, 21))
        self.mean_label.setObjectName("mean_label")
        # std_label setup
        self.std_label = QtWidgets.QLabel(self.centralwidget)
        self.std_label.setGeometry(QtCore.QRect(290, 530, 160, 21))
        self.std_label.setObjectName("std_label")

        # output_textbrowser setup
        self.output_textbrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.output_textbrowser.setGeometry(QtCore.QRect(10, 565, 451, 250))
        self.output_textbrowser.setObjectName("output_textbrowser")

        # run_button setup
        self.run_button = QtWidgets.QPushButton(self.centralwidget)
        self.run_button.setGeometry(QtCore.QRect(360, 315, 93, 28))
        self.run_button.setObjectName("run_button")

        # devider lines setup
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(290, 465, 170, 3))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")        
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(290, 555, 170, 3))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")

        # Mainwindow setup
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 461, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # buttons functions connect
        self.prev_button.clicked.connect(self.show_previous)
        self.next_button.clicked.connect(self.show_next)

        self.find_button.clicked.connect(self.preview)
        self.browse_buttton.clicked.connect(self.browse_file)

        self.check_button.clicked.connect(self.check_bluriness)
        self.show_blurry_button.clicked.connect(self.show_blurry)
        self.show_all_button.clicked.connect(self.show_all)

        self.run_button.clicked.connect(self.run)

        # radio buttons and checkboxes stateChange
        self.auto_filter = 1
        self.manual_filter = 0
        self.outdoor = 0
        self.runNGP = 0

        # set up variables
        # project name
        self.PROJECT_FOLDER = None
        self.images_name = []
        self.images_abs_path = []
        self.images_folder = os.path.join(str(self.PROJECT_FOLDER), "images")

        # image paths and index
        self.index = 0
        self.show_blur = False

        # images blurriness info
        self.blurriness = []
        self.files = []
        self.threshold = 0
        self.mean = 0
        self.std = 0

        self.blurry_ones = {}
        self.to_delete = []
        # self.final = []

        self.blur_img = []
        self.blur_idx = 0

# retranslateUi function
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.auto_filter_radio.setText(_translate("MainWindow", "Auto-filter blurry images"))
        self.manual_filter_radio.setText(_translate("MainWindow", "Manually check blurry images"))
        self.outdoor_checkBox.setText(_translate("MainWindow", "Outdoor scene"))
        self.runNGP_checkBox.setText(_translate("MainWindow", "Run Instant-NeRF"))
        self.next_button.setText(_translate("MainWindow", "Next"))
        self.prev_button.setText(_translate("MainWindow", "Previous"))
        self.browse_buttton.setText(_translate("MainWindow", "Browse"))
        self.check_button.setText(_translate("MainWindow", "Check Blurriness"))
        self.show_blurry_button.setText(_translate("MainWindow", "Show Blurry"))
        self.show_all_button.setText(_translate("MainWindow", "Show All"))
        self.ProjectName_label.setText(_translate("MainWindow", "Project Name:"))
        self.find_button.setText(_translate("MainWindow", "Find"))
        self.blurriness_label.setText(_translate("MainWindow", "blurriness: "))
        self.mean_label.setText(_translate("MainWindow", "mean: "))
        self.std_label.setText(_translate("MainWindow", "std: "))
        self.threshold_label.setText(_translate("MainWindow", "threshold: "))
        self.run_button.setText(_translate("MainWindow", "Run"))

# previous and next button finctions
    def show_previous(self):
        if self.PROJECT_FOLDER and self.blur_img and self.show_blur:
            if len(self.blur_img) == 1:
                self.Pic_label.setPixmap(QtGui.QPixmap(self.blur_img[0]))
            else:
                self.blur_idx = (self.blur_idx - 1) % len(self.blur_img)
                self.Pic_label.setPixmap(QtGui.QPixmap(self.blur_img[self.blur_idx]))
                Ui_MainWindow.update_image_label(self)
            
            Ui_MainWindow.update_image_blurriness(self)
        elif self.PROJECT_FOLDER:
            self.index = (self.index - 1) % len(self.images_abs_path)
            self.Pic_label.setPixmap(QtGui.QPixmap(self.images_abs_path[self.index]))
            Ui_MainWindow.update_image_label(self)
            if self.blurriness:
                Ui_MainWindow.update_image_blurriness(self)
        else:
            pass

    def show_next(self):
        if self.PROJECT_FOLDER and self.blur_img and self.show_blur:
            if len(self.blur_img) == 1:
                self.Pic_label.setPixmap(QtGui.QPixmap(self.blur_img[0]))
            else:
                self.blur_idx = (self.blur_idx + 1) % len(self.blur_img)
                self.Pic_label.setPixmap(QtGui.QPixmap(self.blur_img[self.blur_idx]))
                Ui_MainWindow.update_image_label(self)
            
            Ui_MainWindow.update_image_blurriness(self)
        elif self.PROJECT_FOLDER:
            self.index = (self.index + 1) % len(self.images_abs_path)
            self.Pic_label.setPixmap(QtGui.QPixmap(self.images_abs_path[self.index]))
            Ui_MainWindow.update_image_label(self)
            if self.blurriness:
                Ui_MainWindow.update_image_blurriness(self)
        else:
            pass

# project setting button functions
    def preview(self):
        self.project_name = self.Project_name_lineEdit.text()
        
        if self.project_name:
            self.PROJECT_FOLDER = os.path.join(ROOT_DIR, "data", "nerf", self.project_name)
            # check if project folder exists
            if not os.path.exists(self.PROJECT_FOLDER):
                msg = QMessageBox()
                msg.setWindowTitle("Warning")
                msg.setText("Project folder not found." + "\n"
                            + "Please check project name")
                msg.setIcon(QMessageBox.Warning)
                msg.setDefaultButton(QMessageBox.Ok)
                x = msg.exec_()
            
            else:
                if self.blurry_ones != {}:
                    self.Pic_label.setPixmap(QtGui.QPixmap(self.images_abs_path[self.index]))
                    Ui_MainWindow.update_image_label(self)
                else:
                    self.output_textbrowser.clear()
                    self.output_textbrowser.append("Project Name: " + self.project_name)
                    self.output_textbrowser.append("Folder Path: " + self.PROJECT_FOLDER)
                    self.images_name = []
                    self.images_folder = os.path.join(self.PROJECT_FOLDER, "images")
                    if not os.path.exists(self.images_folder):
                        for root, dirs, files in os.walk(self.PROJECT_FOLDER):
                            if not files:
                                msg = QMessageBox()
                                msg.setWindowTitle("Error")
                                msg.setText("Nothing found in project folder\n" +
                                            "Please double check.")
                                msg.setIcon(QMessageBox.Warning)
                                msg.setDefaultButton(QMessageBox.Ok)
                                x = msg.exec_()
                            else:
                                msg = QMessageBox()
                                msg.setWindowTitle("Warning")
                                msg.setText("Images folder not found\n" +
                                            "Please run the following colmap2nerf to convert video first\n"+
                                            "or double check where the images folder was placed\n\n" +
                                            "Note: It might take a while for colmap2nerf to run")
                                # get video absolute path
                                video = os.listdir(self.PROJECT_FOLDER)
                                self.video_abs_path = os.path.join(self.PROJECT_FOLDER, video[0])
                                self.output_textbrowser.append("------------------")
                                self.output_textbrowser.append("Video found: " + video[0])
                                self.output_textbrowser.append(self.video_abs_path)
                                msg.setDetailedText("python {0}\\colmap2nerf.py --video_in {1} --out {2} --video_fps 2 --run_colmap --aabb_scale 16 --overwrite"
                                                    .format(SCRIPTS_FOLDER, str(self.video_abs_path), str(self.PROJECT_FOLDER)))
                                msg.setIcon(QMessageBox.Warning)
                                msg.setDefaultButton(QMessageBox.Ok)
                                run_button = msg.addButton("Run for me", QMessageBox.AcceptRole)
                                msg.setToolTip("Using colmap2nerf to convert video into images...")
                                run_button.clicked.connect(self.run_for_me)
                                x = msg.exec_()
                    else:
                        self.images = os.listdir(self.images_folder)
                        self.images_abs_path = [os.path.join(self.images_folder, i) for i in self.images]
                        # add images to images_name list
                        for i in self.images:
                            self.images_name.append(i)
                        
                        self.Pic_label.setPixmap(QtGui.QPixmap(self.images_abs_path[self.index]))
                        Ui_MainWindow.update_image_label(self)
                        return self.images_abs_path
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Warning")
            msg.setText("Please set project name")
            msg.setIcon(QMessageBox.Warning)
            msg.setDefaultButton(QMessageBox.Ok)
            x = msg.exec_()
        
    def run_for_me(self):
        # change directory so that transformed.json will end up in project folder even if it's
        # not needed
        os.chdir(self.PROJECT_FOLDER)
        os.system("python {0} --video_in {1} --out {2} --video_fps 2 --run_colmap --aabb_scale 16 --overwrite"
                  .format(os.path.join(SCRIPTS_FOLDER, "colmap2nerf.py"), str(self.video_abs_path), str(self.PROJECT_FOLDER)))

    def browse_file(self):
        select_folder = QtWidgets.QFileDialog.getExistingDirectory(directory=DATA_FOLDER)
        project_name = os.path.basename(select_folder)
        if select_folder and project_name != "images":
            for root, dirs, files in os.walk(select_folder):
                if not files:
                    msg = QMessageBox()
                    msg.setWindowTitle("Error")
                    msg.setText("Nothing found in project folder\n" +
                                "Please double check.")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setDefaultButton(QMessageBox.Ok)
                    x = msg.exec_()
                else:
                    self.Project_name_lineEdit.setText(project_name)
                    Ui_MainWindow.preview(self)
                    Ui_MainWindow.update_image_label(self)
        # in case if the user select the images folder
        if project_name == "images":
            project_name = os.path.basename(os.path.dirname(select_folder))
            self.Project_name_lineEdit.setText(project_name)
            Ui_MainWindow.preview(self)
            Ui_MainWindow.update_image_label(self)

    def update_image_label(self):
        self.Image_name_label.setText(self.images_name[self.index])
        if self.blur_img and self.show_blur:
            self.Image_name_label.setText(self.blur_img[self.blur_idx].split('\\')[-1])

    def update_image_blurriness(self):
        self.blurriness_label.setText("blurriness: " + str(self.blurriness[self.index]))
        if self.blur_img and self.show_blur:
            blur = list(self.blurry_ones.items())[self.blur_idx][1]
            self.blurriness_label.setText("blurriness: " + str(blur))

    def update_image_info(self):
        mean = np.mean(self.blurriness)
        std = np.std(self.blurriness)
        threshold = mean - std
        self.mean_label.setText(f'mean: {mean:.2f}')
        self.std_label.setText(f'std: {std:.2f}')
        self.threshold_label.setText(f'threshold: {threshold:.2f}')
        self.output_textbrowser.append("------------------")
        self.files_info = dict(zip(self.files, self.blurriness))

        self.output_textbrowser.append("Blurry Images")
        for k, v in self.files_info.items():
            if v < threshold:
                self.output_textbrowser.append(f"{k:3} {v:10}")
                self.blurry_ones[self.images_folder + '\\' + k + '.jpg'] = v
        
        return self.blurry_ones

    def check_bluriness(self):
        if not self.PROJECT_FOLDER:
            pass
        else:
            self.output_textbrowser.append("------------------")
            self.output_textbrowser.append("Image   Blurriness")
            for img in self.images_abs_path:
                # load and resize the image, then convert it to grayscale
                orig = cv2.imread(img)
                orig = imutils.resize(orig, width=500)
                gray = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)

                # apply fft blur detector
                blurriness = Ui_MainWindow.detec_fft_blur(gray, size=60)
                self.blurriness.append(float("%.2f" % blurriness))
                self.files.append(img.split('.')[-2].split('\\')[-1])
                print_name = img.split('.')[-2].split('\\')[-1]
                
                self.output_textbrowser.append("{0:10} {1}".format(print_name, "%.2f" % blurriness))
        
            Ui_MainWindow.update_image_blurriness(self)
            Ui_MainWindow.update_image_info(self)

    def show_blurry(self):
        self.show_blur = 1
        if self.PROJECT_FOLDER == None:
            pass
        if self.PROJECT_FOLDER != None:
            if not self.blurriness:
                msg = QMessageBox()
                msg.setWindowTitle("Warning")
                msg.setText("No blurriness calculated yet." + "\n"
                            + "Please check blurriness first")
                msg.setIcon(QMessageBox.Warning)
                msg.setDefaultButton(QMessageBox.Ok)
                x = msg.exec_()
        if self.blurriness:
            self.output_textbrowser.append("------------------")
            self.output_textbrowser.append("Only showing blurry images")
            # first time appending
            if self.blur_img == []:
            # show the blurry images using images name
                for k, v in self.blurry_ones.items():
                    name = k.split('\\')[-1].split('.')[0]
                    self.output_textbrowser.append(f"{name} {v:10}")
                    self.blur_img.append(os.path.join(self.images_folder, k))
            if self.show_blur:
                self.blur_idx = 0
                self.Pic_label.setPixmap(QtGui.QPixmap(self.blur_img[self.blur_idx]))
                Ui_MainWindow.update_image_label(self)
    
    def show_all(self):
        self.show_blur = 0
        if self.PROJECT_FOLDER == None:
            pass
        if self.PROJECT_FOLDER != None:
            if not self.blurriness:
                msg = QMessageBox()
                msg.setWindowTitle("Warning")
                msg.setText("No blurriness calculated yet." + "\n"
                            + "Please check blurriness first")
                msg.setIcon(QMessageBox.Warning)
                msg.setDefaultButton(QMessageBox.Ok)
                x = msg.exec_()
        if self.blurriness:
            self.output_textbrowser.append("------------------")
            self.output_textbrowser.append("Show all")
            Ui_MainWindow.preview(self)
            Ui_MainWindow.update_image_label(self)
            Ui_MainWindow.update_image_blurriness(self)
        
    def filter_blur(self):
        if not self.PROJECT_FOLDER and not self.blurriness:
            pass
        else:
            Ui_MainWindow.show_blurry(self)
            for i in self.blur_img:
                self.to_delete.append(i)
            # a list of final images to keep
            # can be used in future to compare means and stds before and after filtering
            # self.final = [x for x in self.images_abs_path if x not in self.to_delete]

    def run(self):
        if self.outdoor or self.runNGP:
            self.output_textbrowser.append("------------------")
        Ui_MainWindow.run_info(self)
        Ui_MainWindow.filter_state(self)
        if self.auto_filter:
            # remove the blurry images
            for i in self.to_delete:
                # in case the images have somehow been deleted
                if os.path.exists(i):
                    os.remove(i)
        self.output_textbrowser.append("Running the following colmap2nerf, this might take a while...")
        if not self.outdoor:
            self.output_textbrowser.append("python {0}\\colmap2nerf.py --images {1} --run_colmap --aabb_scale 8 --overwrite".format(SCRIPTS_FOLDER, self.images_folder))
        else:
            self.output_textbrowser.append("python {0}\\colmap2nerf.py --images {1} --run_colmap --aabb_scale 16 --overwrite".format(SCRIPTS_FOLDER, self.images_folder))
        # change directory to the project folder so that colmap2nerf would save transformed.json
        # to project folder and get the realitive path to the images correct
        os.chdir(self.PROJECT_FOLDER)
        os.system("python {0}\\colmap2nerf.py --images {1} --run_colmap --aabb_scale 8 --overwrite".format(SCRIPTS_FOLDER, self.images_folder))
        if self.runNGP:
            os.system("{0}\\instant-ngp {1}".format(ROOT_DIR, self.PROJECT_FOLDER))
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Info")
            msg.setText("Colmap2nerf has finished running\n" + 
                        "transformed.json can be found in the project folder")
            msg.setIcon(QMessageBox.Information)
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()

    def filter_state(self):
        if self.manual_filter_radio.isChecked():
            self.auto_filter = 0
            self.manual_filter = 1
        if self.auto_filter_radio.isChecked():
            self.auto_filter = 1
            self.manual_filter = 0
            Ui_MainWindow.filter_blur(self)

    def run_info(self):
        if self.outdoor_checkBox.isChecked():
            self.outdoor = 1
            self.output_textbrowser.append("Scene is outdoor")
        if self.runNGP_checkBox.isChecked():
            self.runNGP = 1
            self.output_textbrowser.append("Will run Instant-NeRF after filtering")

    def detec_fft_blur(image, size=60):
        # get the dimentions of the image and use the dimensions to
        # derive the center (x, y)-coordinates
        (h, w) = image.shape
        (cX, cY) = (int(w / 2.0), int(h / 2.0))
        # compute the FFT to find the frequency transform, then shift
        # the zero frequency component (i.e., DC component located at
        # the top-left corner) to the center where it will be more
        # easy to analyze
        fft = np.fft.fft2(image)
        fftShift = np.fft.fftshift(fft)
        # zero-out the center of the FFT shift (i.e., remove low
        # frequencies), apply the inverse shift such that the DC
        # component once again becomes the top-left, and then apply
        # the inverse FFT
        fftShift[cY - size:cY + size, cX - size:cX + size] = 0
        fftShift = np.fft.ifftshift(fftShift)
        recon = np.fft.ifft2(fftShift)
        # compute the magnitude spectrum of the reconstructed image,
        # then compute the mean of the magnitude values
        magnitude = 20 * np.log(np.abs(recon))
        blurriness = np.mean(magnitude)

        return blurriness

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
